


--시험 
--사원의 사번, 사원명, 부서명, 지역명 조회
-->> 오라클 전용 구문
SELECT E.EMP_NAME, J.JOB_NAME, D.DEPT_TITLE, L.LOCAL_NAME
FROM EMPLOYEE E, JOB J, DEPARTMENT D, LOCATION L
WHERE E.DEPT_CODE = D.DEPT_ID AND D.LOCATION_ID = L.LOCAL_CODE AND E.JOB_CODE = J.JOB_CODE AND DEPT_CODE = 'D2';


--사원명, 직급명, 부서명, 근무지역명
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN JOB USING( JOB_CODE )
JOIN DEPARTMENT ON( DEPT_CODE = DEPT_ID )
JOIN LOCATION ON( LOCAL_CODE = LOCATION_ID )
WHERE DEPT_CODE = 'D2';


---------------------------------------------------------------------------------------------------------------------------------



CREATE TABLE MEMBER (
	ID	 VARCHAR2(10)	PRIMARY KEY,
	NAME	VARCHAR2(10) NOT NULL,
	AGE	NUMBER,
	ADDRESS	VARCHAR2(60) NOT NULL
);

/*COMMENT ON COLUMN MEMBER.ID IS '회원id';
COMMENT ON COLUMN MEMBER.NAME IS '회원이름';
COMMENT ON COLUMN MEMBER.AGE IS '회원나이';
COMMENT ON COLUMN MEMBER.ADDRESS IS '회원주소';*/

CREATE TABLE ORDERS (
	ORDER_NO	VARCHAR2(10) PRIMARY KEY,
	ORDER_ID	VARCHAR2(10) REFERENCES MEMBER(ID) NOT NULL,
	ORDER_PRODUCT	VARCHAR2(20)	NOT NULL,
	COUNT NUMBER NOT NULL,
	ORDER_DATE	DATE	 NULL
);


/*COMMENT ON COLUMN ORDERS.ORDER_NO IS '주문번호';
COMMENT ON COLUMN ORDERS.ORDER_ID IS '주문고객';
COMMENT ON COLUMN ORDERS.ORDER_PRODUCT IS '주문제품';
COMMENT ON COLUMN ORDERS.COUNT IS '주문수량';
COMMENT ON COLUMN ORDERS.ORDER_DATE IS '주문일자';*/


ALTER TABLE MEMBER ADD CONSTRAINT "PK_MEMBER" PRIMARY KEY (
	ID
);

ALTER TABLE ORDERS ADD CONSTRAINT "PK_ORDERS" PRIMARY KEY (
	ORDER_NO
);


--2) 2개의 테이블을 생성한다. 외래키는 member테이블의 id와 order테이블의 order_id를 외래키로 한다.
ALTER TABLE ORDERS ADD CONSTRAINT "FK_MEMBER_TO_ORDERS_1" FOREIGN KEY (
	ORDER_ID
)
REFERENCES MEMBER (
	ID
);

--3)  2개의 생성된 테이블에 데이터를 저장한다.
INSERT INTO MEMBER VALUES( 'dragon', '박문수', 20, '서울시' );
INSERT INTO MEMBER VALUES( 'sky', '김유신', 30, '부산시' );
INSERT INTO MEMBER VALUES( 'blue', '이순신', 25, '인천시' );

INSERT INTO ORDERS VALUES( 'o01', 'sky', '케익', 1, '2023-11-05' );
INSERT INTO ORDERS VALUES( 'o02', 'blue', '고로케', 3, '2023-11-10' );
INSERT INTO ORDERS VALUES( 'o03', 'sky', '단팥빵', 5, '2023-11-22' );
INSERT INTO ORDERS VALUES( 'o04', 'blue', '찹쌀도넛', 2, '2023-11-30' );
INSERT INTO ORDERS VALUES( 'o05', 'dragon', '단팥빵', 4, '2023-11-02' );
INSERT INTO ORDERS VALUES( 'o06', 'sky', '마늘바게트', 2, '2023-11-10' );
INSERT INTO ORDERS VALUES( 'o07', 'dragon', '라이스번', 7, '2023-11-25' );

--4) 테이블로부터 name 컬럼에 ‘신’자가 포함된 문자열을 검색하고 기본키 내림차순으로 정렬하여 출력하는 SQL문을 작성하시오.
SELECT *
FROM MEMBER
WHERE NAME LIKE '%신%'
ORDER BY ID DESC;

--5) 김유신 고객이 주문한 주문제품과 수량을 검색하시오.  ANSI 구문과 ORACLE 구문 모두 작성하시오.
--ANSI
SELECT ORDER_PRODUCT, COUNT
FROM ORDERS
JOIN MEMBER ON (ID = ORDER_ID)
WHERE NAME = '김유신';

--ORACLE
SELECT ORDER_PRODUCT, COUNT
FROM ORDERS, MEMBER
WHERE ID = ORDER_ID 
AND NAME = '김유신';

--6) member테이블에서 주문수량이 3개 이상인 고객의 고객아이디, 제품, 수량, 일자로 구성된 뷰를 ‘great_order’이라는 이름으로 생성하시오.
--단, 뷰에 삽입이나 수정 연산을 할 때 SELECT 문에서 제시한 뷰의 정의 조건을 위반하면 수행되지 않도록 하는 제약조건을 지정 하시오.
CREATE VIEW GREAT_ORDER
AS SELECT ID, ORDER_PRODUCT, COUNT, ORDER_DATE
        FROM MEMBER
        JOIN ORDERS ON ( ID=ORDER_ID )
WHERE COUNT >= 3 WITH CHECK OPTION;

-- 7) ORDER테이블에 RELEASE(CHAR 1, 기본값 ‘Y’)컬럼을 추가하고, ORDER_PRODUCT 컬럼의 타입을 VARCHAR(50) 으로 변경하고, COUNT의 컬럼명을 ORDER_NAME으로 변경하시오.
ALTER TABLE ORDERS
ADD RELEASE CHAR(1) DEFAULT 'Y';
ALTER TABLE ORDERS MODIFY ORDER_PRODUCT VARCHAR2(50);
ALTER TABLE ORDERS RENAME COLUMN COUNT TO ORDER_NAME;
































